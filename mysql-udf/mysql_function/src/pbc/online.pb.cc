// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "online.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace online {
namespace message {
namespace maxthon {
namespace cn {

namespace {

const ::google::protobuf::Descriptor* Online_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Online_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_online_2eproto() {
  protobuf_AddDesc_online_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "online.proto");
  GOOGLE_CHECK(file != NULL);
  Online_descriptor_ = file->message_type(0);
  static const int Online_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, mx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, mx3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, mxa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, mxios_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, mxmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, online_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, grade_),
  };
  Online_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Online_descriptor_,
      Online::default_instance_,
      Online_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Online));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_online_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Online_descriptor_, &Online::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_online_2eproto() {
  delete Online::default_instance_;
  delete Online_reflection_;
}

void protobuf_AddDesc_online_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014online.proto\022\031online.message.maxthon.c"
    "n\"}\n\006Online\022\n\n\002id\030\001 \002(\005\022\013\n\003mx2\030\002 \001(\005\022\013\n\003"
    "mx3\030\003 \001(\005\022\013\n\003mxa\030\004 \001(\005\022\r\n\005mxios\030\005 \001(\005\022\r\n"
    "\005mxmac\030\006 \001(\005\022\023\n\013online_flag\030\007 \001(\005\022\r\n\005gra"
    "de\030\010 \001(\005", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "online.proto", &protobuf_RegisterTypes);
  Online::default_instance_ = new Online();
  Online::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_online_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_online_2eproto {
  StaticDescriptorInitializer_online_2eproto() {
    protobuf_AddDesc_online_2eproto();
  }
} static_descriptor_initializer_online_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Online::kIdFieldNumber;
const int Online::kMx2FieldNumber;
const int Online::kMx3FieldNumber;
const int Online::kMxaFieldNumber;
const int Online::kMxiosFieldNumber;
const int Online::kMxmacFieldNumber;
const int Online::kOnlineFlagFieldNumber;
const int Online::kGradeFieldNumber;
#endif  // !_MSC_VER

Online::Online()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Online::InitAsDefaultInstance() {
}

Online::Online(const Online& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Online::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mx2_ = 0;
  mx3_ = 0;
  mxa_ = 0;
  mxios_ = 0;
  mxmac_ = 0;
  online_flag_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Online::~Online() {
  SharedDtor();
}

void Online::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Online::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Online::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Online_descriptor_;
}

const Online& Online::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_online_2eproto();  return *default_instance_;
}

Online* Online::default_instance_ = NULL;

Online* Online::New() const {
  return new Online;
}

void Online::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mx2_ = 0;
    mx3_ = 0;
    mxa_ = 0;
    mxios_ = 0;
    mxmac_ = 0;
    online_flag_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Online::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mx2;
        break;
      }
      
      // optional int32 mx2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mx2_)));
          set_has_mx2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mx3;
        break;
      }
      
      // optional int32 mx3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mx3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mx3_)));
          set_has_mx3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mxa;
        break;
      }
      
      // optional int32 mxa = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mxa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mxa_)));
          set_has_mxa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mxios;
        break;
      }
      
      // optional int32 mxios = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mxios:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mxios_)));
          set_has_mxios();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mxmac;
        break;
      }
      
      // optional int32 mxmac = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mxmac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mxmac_)));
          set_has_mxmac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_online_flag;
        break;
      }
      
      // optional int32 online_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_flag_)));
          set_has_online_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grade;
        break;
      }
      
      // optional int32 grade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Online::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 mx2 = 2;
  if (has_mx2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mx2(), output);
  }
  
  // optional int32 mx3 = 3;
  if (has_mx3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mx3(), output);
  }
  
  // optional int32 mxa = 4;
  if (has_mxa()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mxa(), output);
  }
  
  // optional int32 mxios = 5;
  if (has_mxios()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mxios(), output);
  }
  
  // optional int32 mxmac = 6;
  if (has_mxmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mxmac(), output);
  }
  
  // optional int32 online_flag = 7;
  if (has_online_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->online_flag(), output);
  }
  
  // optional int32 grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Online::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 mx2 = 2;
  if (has_mx2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mx2(), target);
  }
  
  // optional int32 mx3 = 3;
  if (has_mx3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mx3(), target);
  }
  
  // optional int32 mxa = 4;
  if (has_mxa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mxa(), target);
  }
  
  // optional int32 mxios = 5;
  if (has_mxios()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mxios(), target);
  }
  
  // optional int32 mxmac = 6;
  if (has_mxmac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mxmac(), target);
  }
  
  // optional int32 online_flag = 7;
  if (has_online_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->online_flag(), target);
  }
  
  // optional int32 grade = 8;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Online::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 mx2 = 2;
    if (has_mx2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mx2());
    }
    
    // optional int32 mx3 = 3;
    if (has_mx3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mx3());
    }
    
    // optional int32 mxa = 4;
    if (has_mxa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mxa());
    }
    
    // optional int32 mxios = 5;
    if (has_mxios()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mxios());
    }
    
    // optional int32 mxmac = 6;
    if (has_mxmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mxmac());
    }
    
    // optional int32 online_flag = 7;
    if (has_online_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online_flag());
    }
    
    // optional int32 grade = 8;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Online::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Online* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Online*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Online::MergeFrom(const Online& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mx2()) {
      set_mx2(from.mx2());
    }
    if (from.has_mx3()) {
      set_mx3(from.mx3());
    }
    if (from.has_mxa()) {
      set_mxa(from.mxa());
    }
    if (from.has_mxios()) {
      set_mxios(from.mxios());
    }
    if (from.has_mxmac()) {
      set_mxmac(from.mxmac());
    }
    if (from.has_online_flag()) {
      set_online_flag(from.online_flag());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Online::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Online::CopyFrom(const Online& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Online::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Online::Swap(Online* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mx2_, other->mx2_);
    std::swap(mx3_, other->mx3_);
    std::swap(mxa_, other->mxa_);
    std::swap(mxios_, other->mxios_);
    std::swap(mxmac_, other->mxmac_);
    std::swap(online_flag_, other->online_flag_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Online::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Online_descriptor_;
  metadata.reflection = Online_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cn
}  // namespace maxthon
}  // namespace message
}  // namespace online

// @@protoc_insertion_point(global_scope)
